import helmet from 'helmet';
import express, { Response } from 'express';
import cookieParser from 'cookie-parser';
import swaggerUi from 'swagger-ui-express';
import * as swaggerDocument from './swagger.json';
import { getConfig } from './config/get-config';
import { RegisterRoutes } from './routes';
import { errorHandler } from './middleware/error-handler.middleware';
import { httpLogger } from "./middleware/http-logger.middleware";

/**
 * Disables certificate validation (used for local development or self-signed certs).
 * @warning Never use this in production without understanding the security risks.
 */
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

/**
 * Initializes the Express application.
 */
const app = express();

/**
 * Middleware for cookies and request parsing (JSON, URL-encoded).
 */
app.use(cookieParser());
app.use(express.urlencoded({ extended: true }));
app.use(express.json({ limit: '50mb' }));

/**
 * HTTP request logging.
 */
app.use(httpLogger);

/**
 * Swagger documentation setup (if enabled).
 */
if (getConfig.swagger && getConfig.swaggerUrl) {
    app.use(getConfig.swaggerUrl, swaggerUi.serve, swaggerUi.setup(swaggerDocument));
}

/**
 * Helmet adds basic security headers to responses.
 */
app.use(helmet());

/**
 * Registers all API routes (generated by tsoa).
 */
RegisterRoutes(app);

/**
 * 404 fallback for unmatched routes.
 */
app.use((_req, res: Response) => {
    res.status(404).send({
        message: 'API Not Found',
    });
});

/**
 * Centralized error handler for the API.
 */
app.use(errorHandler);

/**
 * Exports the configured Express app.
 */
export default app;
